/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository
 *
 * An exemplary interface combination for the use case of an Asset Administration Shell Repository
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using AdminShellNS;
using IO.Swagger.Attributes;
using IO.Swagger.Helpers;
using IO.Swagger.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    //[Authorize]
    [ApiController]
    public class AssetAdministrationShellRepositoryApiController : ControllerBase
    {
        private static AASHelper aasHelper;
        /// <summary>
        /// Constructor
        /// </summary>
        public AssetAdministrationShellRepositoryApiController()
        {
            aasHelper = new AASHelper();
        }

        /// <summary>
        /// Deletes an Asset Administration Shell
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell deleted successfully</response>
        [HttpDelete]
        [Route("/shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAssetAdministrationShellById")]
        public virtual IActionResult DeleteAssetAdministrationShellById([FromRoute][Required] string aasIdentifier)
        {
            try
            {
                var deleted = aasHelper.DeleteAASAndAsset(Base64UrlEncoder.Decode(aasIdentifier));
                if (deleted)
                {
                    AasxServer.Program.signalNewData(2);
                    return NoContent();
                }

                return NotFound($"AAS not Found");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Concept Description deleted successfully</response>
        [HttpDelete]
        [Route("/concept-descriptions/{cdIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteConceptDescriptionById")]
        public virtual IActionResult DeleteConceptDescriptionById([FromRoute][Required] string cdIdentifier)
        {
            try
            {
                var conceptDescription = aasHelper.FindConceptDescription(Base64UrlEncoder.Decode(cdIdentifier), out int packageIndex);
                if (conceptDescription == null)
                {
                    return NotFound($"Concept Description not found.");
                }

                bool deleted = aasHelper.DeleteConceptDescription(conceptDescription, packageIndex);
                if (deleted)
                {
                    AasxServer.Program.signalNewData(1);//same tree
                    return NoContent();
                }

                return NotFound($"Could not delete the concept description. Please check the identifier again.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="204">Submodel element deleted successfully</response>
        [HttpDelete]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelElementByPath")]
        public virtual IActionResult DeleteSubmodelElementByPath([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
        {
            try
            {
                //Check if AAS exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out object parent);
                if (submodelElement == null)
                {
                    return NotFound($"Requested submodel element not found.");
                }

                var deleted = aasHelper.DeleteSubmodelElementByPath(submodelElement, parent);
                if (deleted)
                {
                    AasxServer.Program.signalNewData(1); //Same tree, structure changed
                    return NoContent();
                }

                return StatusCode(500, $"Could not delete Submodelelement. Please check the logs for more details.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <response code="204">Submodel element deleted successfully</response>
        [HttpDelete]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelElementByPathSubmodelRepo")]
        public virtual IActionResult DeleteSubmodelElementByPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath)
        {
            try
            {
                //Check if submodel exists
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out object parent);
                if (submodelElement == null)
                {
                    return NotFound($"Requested submodel element not found.");
                }

                var deleted = aasHelper.DeleteSubmodelElementByPath(submodelElement, parent);
                if (deleted)
                {
                    AasxServer.Program.signalNewData(1); // Same tree, structure may change
                    return NoContent();
                }

                return StatusCode(500, $"Could not delete Submodelelement. Please check the logs for more details.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Deletes the submodel reference from the Asset Administration Shell
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Submodel reference deleted successfully</response>
        [HttpDelete]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubmodelReferenceById")]
        public virtual IActionResult DeleteSubmodelReferenceById([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier)
        {
            try
            {
                bool deleted = aasHelper.DeleteSubmodelReferenceFromAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (deleted)
                {
                    AasxServer.Program.signalNewData(1);//same tree structute may change 
                    return NoContent();
                }

                return NotFound($"Could not delete the submodel reference from AAS");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns an appropriate serialization based on the specified format (see SerializationFormat)
        /// </summary>
        /// <param name="aasIds">The Asset Administration Shells&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="submodelIds">The Submodels&#x27; unique ids (BASE64-URL-encoded)</param>
        /// <param name="includeConceptDescriptions">Include Concept Descriptions?</param>
        /// <response code="200">Requested serialization based on SerializationFormat</response>
        [HttpGet]
        [Route("/serialization")]
        [ValidateModelState]
        [SwaggerOperation("GenerateSerializationByIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Requested serialization based on SerializationFormat")]
        public virtual IActionResult GenerateSerializationByIds([FromQuery][Required()] List<string> aasIds, [FromQuery][Required()] List<string> submodelIds, [FromQuery][Required()] bool? includeConceptDescriptions)
        {
            try
            {
                AdminShell.AdministrationShellEnv outputEnv = new AdminShell.AdministrationShellEnv();

                //Fetch AASs for the requested aasIds
                var aaslist = aasHelper.FindAllAasByAASIds(aasIds);
                outputEnv.AdministrationShells = (AdminShellV30.ListOfAdministrationShells)aaslist;

                //Fetch Submodels for the requested submodelIds
                var submodellist = aasHelper.FindAllSubmodelsBySubmodelIds(submodelIds);
                outputEnv.Submodels = (AdminShellV30.ListOfSubmodels)submodellist;

                //Fetch Concept Descriptions used in AAS/Submodels
                if ((bool)includeConceptDescriptions)
                {
                    var conceptDescriptionList = aasHelper.FindConceptDescriptionInAASs(aasIds);
                    aasHelper.FindAllConceptDescriptionsInSubmodels(submodelIds, conceptDescriptionList);
                    outputEnv.ConceptDescriptions.AddRange(conceptDescriptionList);
                }

                return new ObjectResult(outputEnv);

            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns all Asset Administration Shells
        /// </summary>
        /// <param name="assetIds">The key-value-pair of an Asset identifier</param>
        /// <param name="idShort">The Asset Administration Shell’s IdShort</param>
        /// <response code="200">Requested Asset Administration Shells</response>
        [HttpGet]
        [Route("/shells")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAssetAdministrationShells")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetAdministrationShell>), description: "Requested Asset Administration Shells")]
        //public virtual IActionResult GetAllAssetAdministrationShells([FromQuery]List<IdentifierKeyValuePair> assetIds, [FromQuery]string idShort)
        public virtual IActionResult GetAllAssetAdministrationShells([FromQuery] string assetIds, [FromQuery] string idShort)
        {
            try
            {
                var aasList = new List<AdminShell.AdministrationShell>();

                foreach (AdminShellPackageEnv env in AasxServer.Program.env)
                {
                    if (env != null)
                    {
                        aasList.Add(env.AasEnv.AdministrationShells[0]);
                    }
                }

                //Filter w.r.t assetIds
                if (!string.IsNullOrEmpty(assetIds))
                {
                    assetIds = Base64UrlEncoder.Decode(assetIds);
                    var assetIdList = JsonConvert.DeserializeObject<List<IdentifierKeyValuePair_V2>>(assetIds);
                    aasList = aasHelper.FindAllAasByAssetIds(assetIdList);
                }

                //Filter w.r.t idShort
                if (!string.IsNullOrEmpty(idShort))
                {
                    aasList = aasList.Where(x => (x.idShort != null) && x.idShort.Equals(idShort)).ToList();
                }

                return new ObjectResult(aasList);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <param name="idShort">The Concept Description’s IdShort</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Concept Descriptions</response>
        [HttpGet]
        [Route("/concept-descriptions")]
        [ValidateModelState]
        [SwaggerOperation("GetAllConceptDescriptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ConceptDescription>), description: "Requested Concept Descriptions")]
        public virtual IActionResult GetAllConceptDescriptions([FromQuery] string idShort, [FromQuery] string isCaseOf, [FromQuery] string dataSpecificationRef)
        {
            try
            {
                var output = new List<AdminShell.ConceptDescription>();
                foreach (AdminShellPackageEnv env in AasxServer.Program.env)
                {
                    if (env != null)
                    {
                        output.AddRange(env.AasEnv.ConceptDescriptions);
                    }
                }

                //Filter a list w.r.t. idShort
                if (!string.IsNullOrEmpty(idShort))
                {
                    output = output.Where(x => x.idShort.Equals(idShort)).ToList();
                }

                //Filter the list w.r.t. IsCaseOf
                if (!string.IsNullOrEmpty(isCaseOf))
                {
                    var isCaseOfObj = JsonConvert.DeserializeObject<List<AdminShell.ModelReference>>(Base64UrlEncoder.Decode(isCaseOf));
                    output = output.Where(x => (x.IsCaseOf != null) && aasHelper.CompareIsCaseOf(x.IsCaseOf, isCaseOfObj)).ToList();
                }

                //Filter the list w.r.t. dataSpecificationRef
                if (!string.IsNullOrEmpty(dataSpecificationRef))
                {
                    var dataSpecRefReq = JsonConvert.DeserializeObject<AdminShell.DataSpecificationRef>(Base64UrlEncoder.Decode(dataSpecificationRef));
                    output = output.Where(x => (x.embeddedDataSpecification != null) && aasHelper.CompareDataSpecification(x.embeddedDataSpecification, dataSpecRefReq)).ToList();
                }

                return new ObjectResult(output);

            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }

        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">List of found submodel elements</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElements")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SubmodelElement>), description: "List of found submodel elements")]
        public virtual IActionResult GetAllSubmodelElements([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {

            try
            {
                // access AAS and Submodel
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));

                if (submodel == null)
                {
                    return NotFound($"Submodel not found.");
                }

                List<AdminShell.SubmodelElement> submodelElements = new List<AdminShell.SubmodelElement>();
                foreach (var smeWrapper in submodel.submodelElements)
                {
                    submodelElements.Add(smeWrapper.submodelElement);
                }

                var json = aasHelper.HandleOutputModifiers(submodelElements, level, content, extent);

                return new ObjectResult(json);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">List of found submodel elements</response>
        [HttpGet]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelElementsSubmodelRepo")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SubmodelElement>), description: "List of found submodel elements")]
        public virtual IActionResult GetAllSubmodelElementsSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel != null)
                {
                    List<AdminShell.SubmodelElement> submodelElements = new List<AdminShell.SubmodelElement>();
                    foreach (var smeWrapper in submodel.submodelElements)
                    {
                        submodelElements.Add(smeWrapper.submodelElement);
                    }
                    var json = aasHelper.HandleOutputModifiers(submodelElements, level, content, extent);

                    return new ObjectResult(json);
                }
                return NotFound($"Submodel not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns all submodel references
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested submodel references</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}/aas/submodels")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodelReferences")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Reference>), description: "Requested submodel references")]
        public virtual IActionResult GetAllSubmodelReferences([FromRoute][Required] string aasIdentifier)
        {
            try
            {
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS != null)
                {
                    return new ObjectResult(aasReturn.AAS.submodelRefs);
                }
                return NotFound($"AAS not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }

        }

        /// <summary>
        /// Returns all Submodels
        /// </summary>
        /// <param name="semanticId">The value of the semantic id reference (BASE64-URL-encoded)</param>
        /// <param name="idShort">The Submodel’s idShort</param>
        /// <response code="200">Requested Submodels</response>
        [HttpGet]
        [Route("/submodels")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSubmodels")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Submodel>), description: "Requested Submodels")]
        public virtual IActionResult GetAllSubmodels([FromQuery] string semanticId, [FromQuery] string idShort)
        {
            try
            {
                var output = new List<AdminShell.Submodel>();
                foreach (AdminShellPackageEnv env in AasxServer.Program.env)
                {
                    if (env != null)
                    {
                        output.AddRange(env.AasEnv.Submodels);
                    }
                }

                //Filter w.r.t. semanticId
                if (!string.IsNullOrEmpty(semanticId))
                {
                    var reqSemaniticId = JsonConvert.DeserializeObject<AdminShell.SemanticId>(Base64UrlEncoder.Decode(semanticId));
                    output = output.Where(x => (x.semanticId != null) && x.semanticId.Matches(reqSemaniticId)).ToList();
                }

                //Filter w.r.t. idShort
                if (!string.IsNullOrEmpty(idShort))
                {
                    output = output.Where(x => x.idShort.Equals(idShort)).ToList();
                }

                return new ObjectResult(output);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns the Asset Administration Shell
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <response code="200">Requested Asset Administration Shell</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}/aas")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShell")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAdministrationShell), description: "Requested Asset Administration Shell")]
        public virtual IActionResult GetAssetAdministrationShell([FromRoute][Required] string aasIdentifier, [FromQuery] string content)
        {
            try
            {
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS != null)
                {
                    //If content is empty or Normal, return the object as it is
                    if (string.IsNullOrEmpty(content) || content.Equals("normal", StringComparison.OrdinalIgnoreCase))
                    {
                        return new ObjectResult(aasReturn.AAS);
                    }

                    return new ObjectResult(aasHelper.HandleOutputModifiers(aasReturn.AAS, content: content));
                }

                return NotFound();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Administration Shell</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetAdministrationShellById")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAdministrationShell), description: "Requested Asset Administration Shell")]
        public virtual IActionResult GetAssetAdministrationShellById([FromRoute][Required] string aasIdentifier)
        {
            try
            {
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS != null)
                {
                    return new ObjectResult(aasReturn.AAS);
                }

                return NotFound($"Asset Administration Shell not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
                throw;
            }
        }

        /// <summary>
        /// Returns the Asset Information
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Asset Information</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}/aas/asset-information")]
        [ValidateModelState]
        [SwaggerOperation("GetAssetInformation")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetInformation), description: "Requested Asset Information")]
        public virtual IActionResult GetAssetInformation([FromRoute][Required] string aasIdentifier)
        {
            //TODO:Change to AssetInformation in V3
            //No AssetInformation in AAS_V2, hence returning Asset referenced by AAS
            try
            {
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS != null)
                {
                    var asset = aasReturn.AAS.assetInformation;
                    if (asset != null)
                    {
                        return new ObjectResult(asset);
                    }
                }

                return NotFound();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }

        }

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <response code="200">Requested Concept Description</response>
        [HttpGet]
        [Route("/concept-descriptions/{cdIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("GetConceptDescriptionById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConceptDescription), description: "Requested Concept Description")]
        public virtual IActionResult GetConceptDescriptionById([FromRoute][Required] string cdIdentifier)
        {
            try
            {
                var conceptDescription = aasHelper.FindConceptDescription(Base64UrlEncoder.Decode(cdIdentifier), out _);
                if (conceptDescription != null)
                {
                    return new ObjectResult(conceptDescription);
                }

                return NotFound($"Concept Description not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
                throw;
            }
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"></param>
        /// <response code="200">Operation result object</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOperationAsyncResult")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
        public virtual IActionResult GetOperationAsyncResult([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromRoute][Required] string handleId, [FromQuery] string content)
        {
            try
            {
                if (string.IsNullOrEmpty(handleId))
                {
                    return BadRequest($"Invalid HandleId.");
                }
                //Check if aas exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Submodel not found.");
                }

                //Find the operation from the idShortpath
                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (submodelElement == null)
                {
                    return NotFound($"Operation {idShortPath} not found.");
                }

                var opResult = aasHelper.GetOperationAsyncResult(Base64UrlEncoder.Decode(handleId));
                if (opResult != null)
                {
                    return new ObjectResult(opResult);
                }

                return NotFound($"Operation with the handle id not found");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"></param>
        /// <response code="200">Operation result object</response>
        [HttpGet]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOperationAsyncResultSubmodelRepo")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
        public virtual IActionResult GetOperationAsyncResultSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromRoute][Required] string handleId, [FromQuery] string content)
        {
            try
            {
                if (string.IsNullOrEmpty(handleId))
                {
                    return BadRequest($"Invalid HandleId.");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"Submodel not found.");
                }

                //Find the operation from the idShortpath
                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (submodelElement == null)
                {
                    return NotFound($"Operation {idShortPath} not found.");
                }

                var opResult = aasHelper.GetOperationAsyncResult(Base64UrlEncoder.Decode(handleId));
                if (opResult != null)
                {
                    return new ObjectResult(opResult);
                }

                return NotFound($"Operation with the handle id not found");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested Submodel</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodel")]
        [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
        public virtual IActionResult GetSubmodel([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Either AAS or Submodel not found");
                }

                var json = aasHelper.HandleOutputModifiers(submodel, level, content, extent);
                if (json != null)
                {
                    return new ObjectResult(json);
                }

                return NotFound($"Either AAS or Submodel not found");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested submodel element</response>
        [HttpGet]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPath")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelElement), description: "Requested submodel element")]
        public virtual IActionResult GetSubmodelElementByPath([FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if AAS exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found. Please check the identifier.");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Submodel not found. Please check the identifier.");
                }

                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (submodelElement == null)
                {
                    return NotFound($"Requested submodel element not found.");
                }

                var json = aasHelper.HandleOutputModifiers(submodelElement, level, content, extent);
                if (json != null)
                {
                    return new ObjectResult(json);
                }

                return NotFound($"Submodel Element not found");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested submodel element</response>
        [HttpGet]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelElementByPathSubmodelRepo")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmodelElement), description: "Requested submodel element")]
        public virtual IActionResult GetSubmodelElementByPathSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if submodel exists
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (submodelElement == null)
                {
                    return NotFound($"Requested submodel element not found.");
                }

                var json = aasHelper.HandleOutputModifiers(submodelElement, level, content, extent);
                if (json != null)
                {
                    return new ObjectResult(json);
                }

                return NotFound($"Submodel Element not found");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="200">Requested Submodel</response>
        [HttpGet]
        [Route("/submodels/{submodelIdentifier}/submodel")]
        [ValidateModelState]
        [SwaggerOperation("GetSubmodelSubmodelRepo")]
        [SwaggerResponse(statusCode: 200, type: typeof(Submodel), description: "Requested Submodel")]
        public virtual IActionResult GetSubmodelSubmodelRepo([FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"The Submodel not found");
                }

                var json = aasHelper.HandleOutputModifiers(submodel, level, content, extent);
                if (json != null)
                {
                    return new ObjectResult(json);
                }

                return NotFound($"Submodel not found");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <param name="body">Operation request object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="_async">Determines whether an operation invocation is performed asynchronously or synchronously</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <response code="200">Operation result object</response>
        [HttpPost]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/invoke")]
        [ValidateModelState]
        [SwaggerOperation("InvokeOperation")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
        public virtual IActionResult InvokeOperation([FromBody] OperationRequest body, [FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] bool? _async, [FromQuery] string content)
        {
            try
            {
                //Check if aas exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Submodel not found.");
                }

                //Find the operation from the idShortpath
                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (submodelElement == null)
                {
                    return NotFound($"Operation {idShortPath} not found.");
                }

                if (submodelElement is AdminShell.Operation operation)
                {
                    //Primary checks for inout and input variables
                    if (operation.inputVariable.Count != body.InputArguments.Count)
                    {
                        return BadRequest($"Number of input arguments in payload does not fit expected input arguments of Operation.");
                    }

                    if (operation.inoutputVariable.Count != body.InputArguments.Count)
                    {
                        return BadRequest($"Number of InOut arguments in payload does not fit expected InOut arguments of Operation.");
                    }

                    if ((_async != null) && (!(bool)_async))
                    {
                        return new ObjectResult(aasHelper.InvokeOperationSync(operation, body));
                    }

                    var opHandle = aasHelper.InvokeOperationAsync(operation, body);
                    var json = JsonConvert.SerializeObject(opHandle);
                    return new ObjectResult(json);
                }
                else
                {
                    return NotFound($"Element in the IdShortPath is not an Operation.");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <param name="body">Operation request object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="_async">Determines whether an operation invocation is performed asynchronously or synchronously</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <response code="200">Operation result object</response>
        [HttpPost]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}/invoke")]
        [ValidateModelState]
        [SwaggerOperation("InvokeOperationSubmodelRepo")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperationResult), description: "Operation result object")]
        public virtual IActionResult InvokeOperationSubmodelRepo([FromBody] OperationRequest body, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] bool? _async, [FromQuery] string content)
        {
            try
            {
                //Check if submodel exists
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"Submodel not found.");
                }

                //Find the operation from the idShortpath
                var submodelElement = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (submodelElement == null)
                {
                    return NotFound($"Operation {idShortPath} not found.");
                }

                if (submodelElement is AdminShell.Operation operation)
                {
                    //Primary checks for inout and input variables
                    if (operation.inputVariable.Count != body.InputArguments.Count)
                    {
                        return BadRequest($"Number of input arguments in payload does not fit expected input arguments of Operation.");
                    }

                    if (operation.inoutputVariable.Count != body.InputArguments.Count)
                    {
                        return BadRequest($"Number of InOut arguments in payload does not fit expected InOut arguments of Operation.");
                    }

                    if ((_async != null) && (!(bool)_async))
                    {
                        return new ObjectResult(aasHelper.InvokeOperationSync(operation, body));
                    }

                    var opHandle = aasHelper.InvokeOperationAsync(operation, body);
                    var json = JsonConvert.SerializeObject(opHandle);
                    return new ObjectResult(json);
                }
                else
                {
                    return NotFound($"Element in the IdShortPath is not an Operation.");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Creates a new Asset Administration Shell
        /// </summary>
        /// <param name="body">Asset Administration Shell object</param>
        /// <response code="201">Asset Administration Shell created successfully</response>
        [HttpPost]
        [Route("/shells")]
        [ValidateModelState]
        [SwaggerOperation("PostAssetAdministrationShell")]
        [SwaggerResponse(statusCode: 201, type: typeof(AssetAdministrationShell), description: "Asset Administration Shell created successfully")]
        //public virtual IActionResult PostAssetAdministrationShell([FromBody] AssetAdministrationShell body)
        public virtual IActionResult PostAssetAdministrationShell([FromBody] AdminShell.AdministrationShell body)
        {
            try
            {
                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in AAS.");
                }

                //Check if already exists
                var aasReturn = aasHelper.FindAas(body.id.value);
                if (aasReturn.AAS != null)
                {
                    return Conflict($"Asset Administration Shell already exists.");
                }

                bool added = aasHelper.PostAAS(body);
                if (added)
                {
                    AasxServer.Program.signalNewData(2);
                    return Created($"Asset Administration Shell created successfully.", body);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
                throw;
            }
        }


        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <param name="body">Concept Description object</param>
        /// <response code="201">Concept Description created successfully</response>
        [HttpPost]
        [Route("/concept-descriptions")]
        [ValidateModelState]
        [SwaggerOperation("PostConceptDescription")]
        [SwaggerResponse(statusCode: 201, type: typeof(ConceptDescription), description: "Concept Description created successfully")]
        //public virtual IActionResult PostConceptDescription([FromBody]ConceptDescription body)
        public virtual IActionResult PostConceptDescription([FromBody] AdminShell.ConceptDescription body)
        {
            try
            {
                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in Concept Description.");
                }

                //Check if already exists
                var conceptDescription = aasHelper.FindConceptDescription(body.id.value, out _);
                if (conceptDescription != null)
                {
                    return Conflict($"Concept Description already exists.");
                }

                bool added = aasHelper.PostConceptDescription(body);
                if (added)
                {
                    AasxServer.Program.signalNewData(1);
                    return Created($"Concept Description {body.idShort} created successfully.", body);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
                throw;
            }
        }

        /// <summary>
        /// Creates a new Submodel
        /// </summary>
        /// <param name="body">Submodel object</param>
        /// <response code="201">Submodel created successfully</response>
        [HttpPost]
        [Route("/submodels")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodel")]
        [SwaggerResponse(statusCode: 201, type: typeof(Submodel), description: "Submodel created successfully")]
        //public virtual IActionResult PostSubmodel([FromBody]Submodel body)
        public virtual IActionResult PostSubmodel([FromBody] AdminShell.Submodel body)
        {
            try
            {
                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in Submodel.");
                }

                //Check if already exists
                var submodel = aasHelper.FindSubmodel(body.id.value, out _);
                if (submodel != null)
                {
                    return Conflict($"Submodel already exists.");
                }

                bool added = aasHelper.PostSubmodel(body);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); //same tree, structure may change
                    return Created($"Submodel created successfully.", body);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="201">Submodel element created successfully</response>
        [HttpPost]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelElement")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelElement), description: "Submodel element created successfully")]
        //public virtual IActionResult PostSubmodelElement([FromBody]SubmodelElement body, [FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PostSubmodelElement([FromBody] AdminShell.SubmodelElement body, [FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if AAS exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                //Check for idShort in SubmodelElement
                if (string.IsNullOrEmpty(body.idShort))
                {
                    return BadRequest($"No IdShort found in the submodel element");
                }

                //Check if submodel element already exists in the submodel
                var submodelElement = submodel.FindSubmodelElementWrapper(body.idShort);
                if (submodelElement != null)
                {
                    return Conflict($"Submodel element {body.idShort} already exists in submodel");
                }

                bool added = aasHelper.PostSubmodelElement(submodel, body);
                if (added)
                {
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    AasxServer.Program.signalNewData(1);    //Same tree, structure changed
                    return Created($"Submodel Element created successfully.", output);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="201">Submodel element created successfully</response>
        [HttpPost]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelElementByPath")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelElement), description: "Submodel element created successfully")]
        //public virtual IActionResult PostSubmodelElementByPath([FromBody]SubmodelElement body, [FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PostSubmodelElementByPath([FromBody] AdminShell.SubmodelElement body, [FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if AAS exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                //IdShortPath is a path to the parent element
                var parentSME = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (parentSME == null)
                {
                    return NotFound($"Submodel element {idShortPath} not found in submodel.");
                }

                if (string.IsNullOrEmpty(body.idShort))
                {
                    return BadRequest($"IdShort is not set in the submodel element.");
                }

                //Check if requested submodel element already exists in the parent SME
                if (parentSME is AdminShell.SubmodelElementCollection parentSMEColl)
                {
                    var existingSME = parentSMEColl.FindFirstIdShort(body.idShort);
                    if (existingSME != null)
                    {
                        return Conflict($"SubmodelElement already exists in {idShortPath}.");
                    }
                }

                bool added = aasHelper.PostSubmodelElementByPath(parentSME, body);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); //same tree, structure may change
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    return Created($"Submodel element created successfully", output);
                }

                //Re-do
                return NotFound($"Requested submodel element not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
                throw;
            }
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="201">Submodel element created successfully</response>
        [HttpPost]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelElementByPathSubmodelRepo")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelElement), description: "Submodel element created successfully")]
        //public virtual IActionResult PostSubmodelElementByPathSubmodelRepo([FromBody]SubmodelElement body, [FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PostSubmodelElementByPathSubmodelRepo([FromBody] AdminShell.SubmodelElement body, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if submodel exists
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                //IdShortPath is a path to the parent element
                var parentSME = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out _);
                if (parentSME == null)
                {
                    return NotFound($"Submodel element {idShortPath} not found in submodel.");
                }

                if (string.IsNullOrEmpty(body.idShort))
                {
                    return BadRequest($"IdShort is not set in the submodel element.");
                }

                //Check if requested submodel element already exists in the parent SME
                if (parentSME is AdminShell.SubmodelElementCollection parentSMEColl)
                {
                    var existingSME = parentSMEColl.FindFirstIdShort(body.idShort);
                    if (existingSME != null)
                    {
                        return Conflict($"SubmodelElement already exists in {idShortPath}.");
                    }
                }

                bool added = aasHelper.PostSubmodelElementByPath(parentSME, body);
                if (added)
                {
                    AasxServer.Program.signalNewData(2);
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    return Created($"Submodel element created successfully", output);
                }

                //Re-do
                return NotFound($"Requested submodel element not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="201">Submodel element created successfully</response>
        [HttpPost]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelElementSubmodelRepo")]
        [SwaggerResponse(statusCode: 201, type: typeof(SubmodelElement), description: "Submodel element created successfully")]
        //public virtual IActionResult PostSubmodelElementSubmodelRepo([FromBody]SubmodelElement body, [FromRoute][Required]string submodelIdentifier, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PostSubmodelElementSubmodelRepo([FromBody] AdminShell.SubmodelElement body, [FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if submodel exists
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                //Check for idShort in SubmodelElement
                if (string.IsNullOrEmpty(body.idShort))
                {
                    return BadRequest($"No IdShort found in the submodel element");
                }

                //Check if submodel element already exists in the submodel
                var submodelElement = submodel.FindSubmodelElementWrapper(body.idShort);
                if (submodelElement != null)
                {
                    return Conflict($"Submodel element {body.idShort} already exists in submodel");
                }

                bool added = aasHelper.PostSubmodelElement(submodel, body);
                if (added)
                {
                    AasxServer.Program.signalNewData(2);
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    return Created($"Submodel Element {body.idShort} created successfully.", output);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Creates a submodel reference at the Asset Administration Shell
        /// </summary>
        /// <param name="body">Reference to the Submodel</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="201">Submodel reference created successfully</response>
        [HttpPost]
        [Route("/shells/{aasIdentifier}/aas/submodels")]
        [ValidateModelState]
        [SwaggerOperation("PostSubmodelReference")]
        [SwaggerResponse(statusCode: 201, type: typeof(Reference), description: "Submodel reference created successfully")]
        //public virtual IActionResult PostSubmodelReference([FromBody]Reference body, [FromRoute][Required]string aasIdentifier)
        public virtual IActionResult PostSubmodelReference([FromBody] AdminShell.SubmodelRef body, [FromRoute][Required] string aasIdentifier)
        {
            try
            {
                if (body.Count == 0)
                {
                    return BadRequest($"No references present in the request payload.");
                }
                else if (body.Count != 1)
                {
                    return BadRequest($"More than one references present in the request payload.");
                }

                //Check if AAS exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found.");
                }

                //Check if Submodel with this reference exists
                var submodel = aasHelper.FindSubmodelWithReference(body);
                if (submodel == null)
                {
                    return BadRequest($"No Submodel with this reference present in the server");
                }

                //Check if reference already exists with the AAS
                if (aasReturn.AAS.HasSubmodelRef(new AdminShell.SubmodelRef(body)))
                {
                    return Conflict($"The Submodel Reference already exists in AAS");
                }

                aasReturn.AAS.AddSubmodelRef(new AdminShell.SubmodelRef(body));
                AasxServer.Program.signalNewData(1);
                return Created($"Submodel reference created successfully.", body);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }

        }

        /// <summary>
        /// Updates the Asset Administration Shell
        /// </summary>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <response code="204">Asset Administration Shell updated successfully</response>
        [HttpPut]
        [Route("/shells/{aasIdentifier}/aas")]
        [ValidateModelState]
        [SwaggerOperation("PutAssetAdministrationShell")]
        //public virtual IActionResult PutAssetAdministrationShell([FromBody]AssetAdministrationShell body, [FromRoute][Required]string aasIdentifier, [FromQuery]string content)
        public virtual IActionResult PutAssetAdministrationShell([FromBody] AdminShell.AdministrationShell body, [FromRoute][Required] string aasIdentifier, [FromQuery] string content)
        {
            try
            {
                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in AAS.");
                }

                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found.");
                }

                bool added = aasHelper.PutAAS(body, aasReturn);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); // same tree, structure may change
                    object output = aasHelper.HandleOutputModifiers(body, content: content);
                    return Created($"AAS updated successfully.", output);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell
        /// </summary>
        /// <param name="body">Asset Administration Shell object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Asset Administration Shell updated successfully</response>
        [HttpPut]
        [Route("/shells/{aasIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutAssetAdministrationShellById")]
        //public virtual IActionResult PutAssetAdministrationShellById([FromBody]AssetAdministrationShell body, [FromRoute][Required]string aasIdentifier)
        public virtual IActionResult PutAssetAdministrationShellById([FromBody] AdminShell.AdministrationShell body, [FromRoute][Required] string aasIdentifier)
        {
            try
            {
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found.");
                }

                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in AAS.");
                }

                bool added = aasHelper.PutAAS(body, aasReturn);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); //Same tree, structure/values may change (e.g., submodelRefs may be added or deleted, hence 1)
                    return NoContent();
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Updates the Asset Information
        /// </summary>
        /// <param name="body">Asset Information object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Asset Information updated successfully</response>
        [HttpPut]
        [Route("/shells/{aasIdentifier}/aas/asset-information")]
        [ValidateModelState]
        [SwaggerOperation("PutAssetInformation")]
        //public virtual IActionResult PutAssetInformation([FromBody]AssetInformation body, [FromRoute][Required]string aasIdentifier)
        public virtual IActionResult PutAssetInformation([FromBody] AdminShell.AssetInformation body, [FromRoute][Required] string aasIdentifier)
        {
            try
            {
                //Check if identification exists
                if (body.globalAssetId == null || body.specificAssetId == null)
                {
                    return BadRequest($"No Identification found in Asset.");
                }

                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found.");
                }

                bool added = aasHelper.AddAsset(body, aasReturn);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); //Same tree, strcture may change
                    return NoContent();
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <response code="204">Concept Description updated successfully</response>
        [HttpPut]
        [Route("/concept-descriptions/{cdIdentifier}")]
        [ValidateModelState]
        [SwaggerOperation("PutConceptDescriptionById")]
        //public virtual IActionResult PutConceptDescriptionById([FromBody]ConceptDescription body, [FromRoute][Required]string cdIdentifier)
        public virtual IActionResult PutConceptDescriptionById([FromBody] AdminShell.ConceptDescription body, [FromRoute][Required] string cdIdentifier)
        {
            try
            {
                var existingCD = aasHelper.FindConceptDescription(Base64UrlEncoder.Decode(cdIdentifier), out int packageIndex);
                if (existingCD == null)
                {
                    return NotFound($"Concept Description not found.");
                }

                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in Concept Description.");
                }

                bool added = aasHelper.PutConceptDescription(body, existingCD, packageIndex);
                if (added)
                {
                    AasxServer.Program.signalNewData(0); //Same tree, same structure, only values modified
                    return NoContent();
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <param name="body">Submodel object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="204">Submodel updated successfully</response>
        [HttpPut]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodel")]
        //public virtual IActionResult PutSubmodel([FromBody]Submodel body, [FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PutSubmodel([FromBody] AdminShell.Submodel body, [FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in Submodel.");
                }

                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found.");
                }

                //Check if submodel exists
                var existingSubmodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out int packageIndex);
                if (existingSubmodel == null)
                {
                    return NotFound($"Submodel not found.");
                }

                bool added = aasHelper.PutSubmodel(body, existingSubmodel, packageIndex);
                if (added)
                {
                    //Check if AAS has the submodelRef, if not create one.
                    var newsmRef = AdminShell.SubmodelRef.CreateNew("Submodel", body.id.value);
                    if (!aasReturn.AAS.HasSubmodelRef(newsmRef))
                    {
                        aasReturn.AAS.submodelRefs.Add(newsmRef);
                    }
                    AasxServer.Program.signalNewData(1);
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    return Created($"Submodel updated successfully.", output);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="204">Submodel element updated successfully</response>
        [HttpPut]
        [Route("/shells/{aasIdentifier}/aas/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelElementByPath")]
        //public virtual IActionResult PutSubmodelElementByPath([FromBody]SubmodelElement body, [FromRoute][Required]string aasIdentifier, [FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PutSubmodelElementByPath([FromBody] AdminShell.SubmodelElement body, [FromRoute][Required] string aasIdentifier, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if AAS exists
                var aasReturn = aasHelper.FindAas(Base64UrlEncoder.Decode(aasIdentifier));
                if (aasReturn.AAS == null)
                {
                    return NotFound($"AAS not found");
                }

                //Check if submodel exists
                var submodel = aasHelper.FindSubmodelWithinAAS(Base64UrlEncoder.Decode(aasIdentifier), Base64UrlEncoder.Decode(submodelIdentifier));
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                if (string.IsNullOrEmpty(body.idShort))
                {
                    return BadRequest($"IdShort is not set in the submodel element.");
                }

                if (!idShortPath.Contains('.'))
                {
                    return BadRequest($"Please check the idShortPath again.");
                }
                //IdShortPath is a path to this requested submodel element
                var existingSME = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out object parent);
                if (existingSME == null)
                {
                    return NotFound($"Submodel Element not found.");
                }
                //TODO: Remove
                //string parentIdShortPath = idShortPath.Substring(0, idShortPath.IndexOf('.'));
                //var parentSME = aasHelper.FindSubmodelElementByPath(submodel, parentIdShortPath, out _);
                //if (parentSME == null)
                //{
                //    return NotFound($"Parent Submodel element not found in submodel {submodelIdentifier}.");
                //}

                bool added = aasHelper.PutSubmodelElementByPath(parent, body, existingSME);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); //TODO: change 0, however, value doesn't reflect automatically with 0.
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    return Created($"Submodel updated successfully.", output);
                }

                //Re-do
                return NotFound($"Requested submodel element not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <param name="body">Requested submodel element</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="204">Submodel element updated successfully</response>
        [HttpPut]
        [Route("/submodels/{submodelIdentifier}/submodel/submodel-elements/{idShortPath}")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelElementByPathSubmodelRepo")]
        //public virtual IActionResult PutSubmodelElementByPathSubmodelRepo([FromBody]SubmodelElement body, [FromRoute][Required]string submodelIdentifier, [FromRoute][Required]string idShortPath, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PutSubmodelElementByPathSubmodelRepo([FromBody] AdminShell.SubmodelElement body, [FromRoute][Required] string submodelIdentifier, [FromRoute][Required] string idShortPath, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                //Check if submodel exists
                var submodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out _);
                if (submodel == null)
                {
                    return NotFound($"Submodel not found");
                }

                if (string.IsNullOrEmpty(body.idShort))
                {
                    return BadRequest($"IdShort is not set in the submodel element.");
                }

                //IdShortPath is a path to this requested submodel element
                var existingSME = aasHelper.FindSubmodelElementByPath(submodel, idShortPath, out object parent);
                if (existingSME == null)
                {
                    return NotFound($"Submodel Element not found.");
                }

                //TODO: Remove
                //string parentIdShortPath = idShortPath.Substring(0, idShortPath.IndexOf('.'));
                //var parentSME = aasHelper.FindSubmodelElementByPath(submodel, parentIdShortPath, out _);
                //if (parentSME == null)
                //{
                //    return NotFound($"Parent Submodel element not found in submodel {submodelIdentifier}.");
                //}

                bool added = aasHelper.PutSubmodelElementByPath(parent, body, existingSME);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); //TODO:0, however, values change is reflected automaticcally with 0.
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    return Created($"Submodel element updated successfully.", output);
                }

                //Re-do
                return NotFound($"Requested submodel element not found.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <param name="body">Submodel object</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <param name="level">Determines the structural depth of the respective resource content</param>
        /// <param name="content">Determines the request or response kind of the resource</param>
        /// <param name="extent">Determines to which extent the resource is being serialized</param>
        /// <response code="204">Submodel updated successfully</response>
        [HttpPut]
        [Route("/submodels/{submodelIdentifier}/submodel")]
        [ValidateModelState]
        [SwaggerOperation("PutSubmodelSubmodelRepo")]
        //public virtual IActionResult PutSubmodelSubmodelRepo([FromBody]Submodel body, [FromRoute][Required]string submodelIdentifier, [FromQuery]string level, [FromQuery]string content, [FromQuery]string extent)
        public virtual IActionResult PutSubmodelSubmodelRepo([FromBody] AdminShell.Submodel body, [FromRoute][Required] string submodelIdentifier, [FromQuery] string level, [FromQuery] string content, [FromQuery] string extent)
        {
            try
            {
                if (body.id == null || string.IsNullOrEmpty(body.id.value))
                {
                    return BadRequest($"No Identification found in Submodel.");
                }

                //Check if submodel exists
                var existingSubmodel = aasHelper.FindSubmodel(Base64UrlEncoder.Decode(submodelIdentifier), out int packageIndex);
                if (existingSubmodel == null)
                {
                    return NotFound($"Submodel not found.");
                }

                bool added = aasHelper.PutSubmodel(body, existingSubmodel, packageIndex);
                if (added)
                {
                    AasxServer.Program.signalNewData(1); //same tree, but strcture may change, e.g. new SMEs may get added.
                    object output = aasHelper.HandleOutputModifiers(body, level, content, extent);
                    return Created($"Submodel updated successfully.", output);
                }

                return Ok($"Error: not added since datastructure completely filled already");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}
