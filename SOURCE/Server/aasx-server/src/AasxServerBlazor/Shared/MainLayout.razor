@inherits LayoutComponentBase
@inject NavigationManager NavMan
@inject Data.AASService SubmodelService
@* @inject Data.CredentialService cs *@
@using AasCore.Aas3_0_RC02;
@using AasxServer
@using System
@using Microsoft.IdentityModel.Tokens;
<style>
    .loader {
    width: 28px;
    height: 28px;
    border: 5px solid #AAA;
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
    }

    @@keyframes rotation {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
    } 
</style>
@*<div class="sidebar">
    <NavMenu />
</div>*@
<div class="main h-screen">
    @{
        if (input == "")
        {
            input = "anonymous";
            AasxServer.AasxCredentials.initAnonymous(cs.credentials);
            IO.Swagger.Registry.Controllers.RegistryAndDiscoveryInterfaceApiController.initRegistry(cs.credentials, DateTime.UtcNow);
            AasxServer.AasxTask.resetTimeStamp();
        }
        bool isPcf = NavMan.Uri.EndsWith("/pcf") || NavMan.Uri.EndsWith("/pcf/")
        || NavMan.Uri.EndsWith("/pcf2") || NavMan.Uri.EndsWith("/pcf2/")
        || NavMan.Uri.EndsWith("/pcf2edc") || NavMan.Uri.EndsWith("/pcf2edc/");

        if (!isPcf)
        {
            <div class="top-row px-4">
                <span align=left hspace=20 style="color:blue;font:xx-large"><strong>AASX Browser</strong></span>
                <img align=left hspace=20 src="2022-02-15_IDTA_AAS-Logo_Final_RGB.png" height="55" width="60" />
                <img align=left hspace=20 src="Logo_IDTA.jpg" height="30" width="140" />
                <img align=left hspace=20 src="SpecPI40_t.png" height="22" width="250" />
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> AASX Model
                </NavLink>
                <NavLink class="nav-link" href="About" Match="NavLinkMatch.All">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> LICENSE.TXT
                </NavLink>
            </div>
            <div class="content px-4">
                @Body
            </div>
        }
        else
        {
            <style>
                input:checked ~ .dot {
                transform: translateX(100%);
                background-color: #174a87 !important; /* zvei blau */
                }
                @@media (max-width: 600px) { /* hide iframe in low widths - mobile phones*/
                .hide-slim {display: none;}
                .expand-slim {overflow-y: visible !important;}
                .node {
                padding-left: 1.2rem !important;
                padding-right: 0.5rem !important;
                }
                }
            </style>
            <div style="height:100%; flex; padding:0px !important; overflow-y: visible;">
                <div class="top-row flex justify-between" style="justify-content: space-between; padding: 0px; min-height: 8%;">
                    <div class="self-center">
                        <div class="flex items-stretch">
                            <img src="zvei_2021_RZ_RGB.png" style="max-width: 100px; display: inline; object-fit: contain;" />
                            <span hspace=20 style="padding-right:10px; font:xx-large;" class="self-center"><strong>Product Carbon Footprint Showcase</strong></span>
                        </div>
                    </div>
                    <div>
                        <!-- toggle -->
                        <!-- label -->
                        <span class="ml-3 text-gray-700 font-medium">
                            @if (loading)
                            {
                                <span class="loader align-middle"></span>
                                <span style="">Loading submodels...</span>
                            }
                            else
                            {
                                 <span style="">Loaded @AasxServer.Program.submodelAPIcount submodels @watchText</span>
                            }
                            &nbsp&nbsp&nbsp&nbsp&nbsp
                            Role:
                            <!--Curr: <span style="border-width: 1px; color: blue;">@input</span>-->

                            <select @bind="role" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-1 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                                <!--<option selected="@role"></option>-->
                                @{
                                    for (int i = 0; i < roleList.Count; i++)
                                    {
                                        <option value="@roleList[i]">@roleList[i]</option>
                                    }
                                }
                            </select>
                            <input class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-1 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" type="password" size="4" @bind="CurrentValue" />
                            <button class="btn bg-blue-500 text-white p-1 text-sm" style="background-color: #174a87;" @onclick="update">Authenticate</button>&nbsp&nbsp
                            @code {
                            private string CurrentValue { get; set; }
                        }
                        @{
                                if (edit)
                                {
                                    <span style="color:red;">edit&nbsp&nbsp</span>
                                }
                                async Task update()
                                {
                                    if (CurrentValue != null && CurrentValue != "")
                                    {
                                        AasxServer.Program.submodelAPIcount = 0;
                                        if (CurrentValue == "edit")
                                        {
                                            edit = !edit;
                                            AasxServer.Program.signalNewData(2);
                                        }
                                        else if (CurrentValue == "count=0")
                                        {
                                            AasxServer.Program.submodelAPIcount = 0;
                                        }
                                        else if (CurrentValue.Contains("get="))
                                        {
                                            CurrentValue = CurrentValue.Replace("get=", "");
                                            AasxServer.Program.getUrl = CurrentValue;
                                            AasxServer.Program.signalNewData(2);
                                        }
                                        else if (CurrentValue.Contains("secret="))
                                        {
                                            CurrentValue = CurrentValue.Replace("secret=", "");
                                            AasxServer.Program.getUrl = CurrentValue;
                                            AasxServer.Program.signalNewData(2);
                                        }
                                        else
                                        {
                                            if (role == "")
                                                role = roleList[0];
                                            if (CurrentValue.Contains("Email=") || CurrentValue.Contains("@"))
                                            {
                                                CurrentValue = CurrentValue.Replace("Email=", "");
                                                AasxServer.AasxCredentials.initByEmail(cs.credentials, CurrentValue);
                                                input = CurrentValue;
                                                role = "";
                                            }
                                            else if (CurrentValue.Contains("CREDENTIALS-") && CurrentValue.Contains(".DAT"))
                                            {
                                                AasxServer.AasxCredentials.initByFile(cs.credentials, CurrentValue);
                                                input = CurrentValue;
                                                role = "";
                                            }
                                            else if (CurrentValue.Contains("edc="))
                                            {
                                                CurrentValue = CurrentValue.Replace("edc=", "");
                                                AasxServer.AasxCredentials.initByEdc(cs.credentials, "someuser", "somepassword", CurrentValue);
                                                input = CurrentValue;
                                                role = "";
                                            }
                                            else
                                            {
                                                AasxServer.AasxCredentials.initByUserPW(cs.credentials, role, CurrentValue);
                                                input = role;
                                            }
                                            loading = true;
                                            StateHasChanged();
                                            await Task.Delay(1); //hack to let frontend update
                                            var watch = System.Diagnostics.Stopwatch.StartNew();
                                            IO.Swagger.Registry.Controllers.RegistryAndDiscoveryInterfaceApiController.initRegistry(
                                                cs.credentials, DateTime.UtcNow, true);
                                            watch.Stop();
                                            Console.WriteLine(watch.ElapsedMilliseconds + " ms");
                                            watchText = "in " + ((watch.ElapsedMilliseconds + 500) / 1000).ToString() + "s";
                                            AasxServer.AasxTask.resetTimeStamp();
                                            loading = false;
                                        }
                                        CurrentValue = "";
                                        this.StateHasChanged();
                                    }
                                }
                            }
                        </span>
                    </div>
                    <div class="self-center text-right p-2" style="margin-top:8px;">
                        <label for="toggle" class="flex items-center cursor-pointer justify-end">
                            Disclaimer: displayed PCF values are for demo purposes only
                            <div class="relative ml-2">
                                <!-- input -->
                                <input type="checkbox" id="toggle" class="sr-only"
                                           onclick="Array.from(document.getElementsByClassName('hidden')).forEach(function (item)
                                        { item.style.display = item.style.display != 'block' ? 'block' : 'none'; })">
                                <!-- line -->
                                <div class="block bg-gray-200 w-10 h-6 rounded-full"></div>
                                <!-- dot -->
                                <div class="dot absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition"></div>
                            </div>
                        </label>
                    </div>
                </div>
                <div class="flex flex-row" style="height:92%;">
                    <div class="content px-4 basis-1/3 expand-slim" style="height:100%; padding: 0px !important; overflow-y: scroll;">
                        @Body
                    </div>
                    <div class="content px-4 basis-2/3 hide-slim" style="padding: 0px !important;">
                        <iframe src="@getIframePath()"
                                    id="iframe" style="width: 100%; height: 100%;"></iframe>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code{
    static List<string> roleList = new List<string>
    {   //"norole", "role1", "role2", "role3", 
        "Anonym", "Isabelle", "Steven", /*"Mary",*/ "Albert"
    };
    static string role = roleList[0];
    static string input = "";
    static string watchText = "";
    static string path = "";
    static bool loading = false;
    static bool edit = false;

    //TODO: code duplication with Pcf2.razor
    static string getAasLink(AssetAdministrationShell aas)
    {
        string endpoint = null;
        var idEncoded = Base64UrlEncoder.Encode(aas.Id);
        if (aas.Extensions != null)
        {
            endpoint = aas.Extensions[0].Value;
        }
        else
        {
            endpoint = Program.externalBlazor + "/shells/" + idEncoded;
        }

        return endpoint;
    }

    string getIframePath()
    {
        var link = "";
        //get the admin shell of the cabinet
        foreach (var env in AasxServer.Program.env)
        {
            if (env != null)
            {
                var aas = env.AasEnv.AssetAdministrationShells[0];
                if (aas.IdShort != "ZveiControlCabinetAas - EXTERNAL")
                    continue;

                link = "?aasUrl=" + getAasLink(aas);

                var registry = IO.Swagger.Registry.Controllers.RegistryAndDiscoveryInterfaceApiController.getRegistry;
                if (registry.Count != 0)
                {
                    link += "&registryURL=" + registry[0];
                }

                var queryPara = "";
                var userPW = "";
                var urlEdcWrapper = "";
                if (AasxCredentials.get(cs.credentials, link, out queryPara, out userPW, out urlEdcWrapper))
                {
                    queryPara = Base64UrlEncoder.Encode(queryPara);
                    link += "&query=" + queryPara;
                    // Console.WriteLine("iframe:" + link);
                }

            }
        }

        //TODO: not passing credentials
        var p = System.Environment.GetEnvironmentVariable("IFRAMEPATH");
        if (p != null)
        {
            p = p.Replace("\r", "");
            p = p.Replace("\n", "");
            path = p;
        }

        path += link;
 

        return path;
    }

    protected override void OnInitialized()
    {
        SubmodelService.NewDataAvailable += NewData;
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (args is Program.NewDataAvailableArgs newArgs)
        {
            int newDataMode = newArgs.signalNewDataMode;
            if (newDataMode != 0)
            {
                InvokeAsync(() => this.StateHasChanged());
            }
        }
    }
}
