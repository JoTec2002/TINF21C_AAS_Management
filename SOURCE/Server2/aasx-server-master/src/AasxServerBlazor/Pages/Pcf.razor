@page "/pcf";

@using Data
@inject AASService SubmodelService
@using AasxServer;
@using static AdminShellNS.AdminShellV20;
@using System.Drawing;
@using System.Globalization;
@implements IDisposable

@{ 
    DateTime timeStamp = DateTime.UtcNow;
    // AasxTask.cfpNode node = AasxTask.createCfpTree(0, timeStamp);
    // AasxTask.cfpNode node = AasxTask.root;
    float total = 0.0f;
    try
    {
        total = (float)Convert.ToDouble(AasxTask.root.cradleToGateCombination.value, CultureInfo.InvariantCulture);
        total = (float)Math.Round(total, 1);

    }
    catch { }
}
<div class="relative flex min-h-screen flex-col justify-center overflow-hidden bg-gray-50">
    <img src="https://play.tailwindcss.com/img/beams.jpg" alt="" class="absolute top-1/2 left-1/2 max-w-none -translate-x-1/2 -translate-y-1/2" width="1308" />
    <div style="background-color: #174a87; margin-left:1px; margin-top:2px;" class="node w-full mb-2 relative px-6 pt-4 pb-2 shadow-xl ring-1 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">
        <div  class="node mb-2 flex flex-row space-x-2">
            <div class="self-center grow">
                <div class="font-bold text-slate-700 dark:text-slate-500 text-center">
                    <font>
                        <span style="color: white; font-size:250%;">@total</span>
                        <span style="color: #EFEFEF; font-size:130%">
                            kg CO<sub>2</sub>e
                        </span>
                    </font>
                </div>
            </div>
        </div>
    </div>
    @{
        nextLevel(AasxTask.root, total, timeStamp);
    }
</div>

    @{
        void nextLevel(AasxTask.cfpNode nextNode, float total, DateTime timeStamp, bool moduleOnly = false)
        {
            <div class="node mb-2 relative bg-white px-6 pt-4 pb-2 shadow-xl ring-1 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">

                @{
                    AasxTask.cfpNode node = nextNode;
                    while (node != null)
                    {
                        if (node.iChild == 0)
                        {

                            bool view = false;
                            bool viewCombination = false;
                            string value = "";
                            if (moduleOnly)
                            {
                                if (node.cradleToGateModule != null)
                                {
                                    value = node.cradleToGateModule.value;
                                    view = true;
                                }
                            }
                            else
                            {
                                if (node.children.Count != 0)
                                {
                                    if (node.cradleToGateCombination != null)
                                    {
                                        value = node.cradleToGateCombination.value;
                                        //if (node != AasxTask.root)
                                        viewCombination = true;
                                        view = true;
                                    }
                                }
                                else
                                {
                                    if (node.cradleToGateModule != null)
                                    {
                                        value = node.cradleToGateModule.value;
                                        view = true;
                                    }
                                }
                            }
                            float actual = 0.0f;
                            try
                            {
                                actual = (float)Convert.ToDouble(value, CultureInfo.InvariantCulture);
                            }
                            catch { }

                            if (view)
                            {
                                string productImage = getImage(node.productImage, node.envIndex);
                                string manufacturerLogo = getImage(node.manufacturerLogo, node.envIndex);
                                float p = actual / total * 100;
                                if (p < 1)
                                    p = 1;
                                string percent = "0";
                                try
                                {
                                    percent = Convert.ToInt32(p).ToString();
                                }
                                catch { }
                                value = Math.Round(actual, 3).ToString(CultureInfo.InvariantCulture);

                                //hide all pcf values except for root
                                var hideClass = "hidden";
                                var hideCircle = hideClass; //always hide circle
                                var hideElement = hideClass; //decide hiding of elements


                                <div class="node mb-2 flex flex-row space-x-2">

                                    <div class="grid place-items-center self-center @hideElement">
                                        <div class="w-10 mx-auto @hideCircle">
                                            <svg height="35" width="35" viewBox="0 0 20 20">
                                                <circle r="5" cx="10" cy="10" fill="white"
                                                        stroke="#174a87"
                                                        stroke-width="10"
                                                        stroke-dasharray="calc(@percent * 31.42px / 100) 31.42"
                                                        transform="rotate(-90) translate(-20)" />
                                                <circle r="9.5" cx="10" cy="10" fill="white"
                                                        stroke-width="0.5"
                                                        fill-opacity="0"
                                                        stroke="#174a87"
                                                        transform="rotate(-90) translate(-20)" />
                                            </svg>
                                        </div>
                                        <div class="self-center text-center @hideElement">
                                            @{
                                                //if (node == AasxTask.root)
                                                //{
                                                //    <font size="+2"><span style="color:#174a87">@value</span></font>
                                                //}
                                                //else
                                                //{
                                                <span style="color:#174a87">@value</span>
                                                //}
                                            }
                                        </div>
                                    </div>
                                    @if (!viewCombination && productImage != null)
                                    {
                                        var bytes = Convert.FromBase64String(productImage);
                                        using (var stream = new System.IO.MemoryStream(bytes))
                                        {
                                            using (System.Drawing.Image img = System.Drawing.Image.FromStream(stream))
                                            {
                                                double idealArea = 2000;
                                                var maxWidth = Math.Round(img.Width * Math.Sqrt(idealArea / ((double)img.Width * (double)img.Height)));
                                                var maxWidthPx = maxWidth + "px";

                                                // <img src=data:image;base64,@productImage class="h-16" style="max-width: @maxWidthPx; object-fit: contain;" />
                                                productImage = getImageLink(node.productImage, node.envIndex);
                                                if (productImage != null)
                                                {
                                                    <img src=@productImage class="h-16" style="max-width: @maxWidthPx; object-fit: contain;" />
                                                }
                                            }
                                        }
                                    }
                                    @if (manufacturerLogo != null)
                                    {
                                        var bytes = Convert.FromBase64String(manufacturerLogo);
                                        using (var stream = new System.IO.MemoryStream(bytes))
                                        {
                                            using (System.Drawing.Image img = System.Drawing.Image.FromStream(stream))
                                            {
                                                double idealArea = 1800;
                                                var maxWidth = Math.Round(img.Width * Math.Sqrt(idealArea / ((double)img.Width * (double)img.Height)));
                                                var maxWidthPx = maxWidth + "px";

                                                // <img src=data:image;base64,@manufacturerLogo style="max-width: @maxWidthPx; object-fit: contain;" class="self-center" />
                                                manufacturerLogo = getImageLink(node.manufacturerLogo, node.envIndex);
                                                if (manufacturerLogo != null)
                                                {
                                                    <img src=@manufacturerLogo style="max-width: @maxWidthPx; object-fit: contain;" class="self-center" />
                                                }
                                            }
                                        }
                                    }
                                    @{
                                        string text = node.productDesignation;
                                        if (viewCombination)
                                        {
                                            text = "Combination - " + text;
                                        }
                                        <div class="self-center grow">
                                            <div class="font-bold text-slate-700 dark:text-slate-500">@text</div>
                                        </div>
                                    }
                                    <div class="flex-none self-center hide-slim">
                                        <button class="btn px-3 text-white"
                                                onclick="document.getElementById('iframe').src='/dashboard/submodelView.html?id=@node.aas.idShort'"
                                                style="background-color: #174a87; padding: 0.1rem 0.4rem 0.1rem 0.4rem !important;">
                                            <i class="fas fa-arrow-right" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                </div>
                                if (!moduleOnly && node.children.Count != 0 && node.cradleToGateModule != null)
                                {
                                    nextLevel(node, total, timeStamp, true);
                                }
                            }
                        }

                        // move up, if all children iterated
                        if (moduleOnly || node.iChild == node.children.Count)
                        {
                            node.iChild = 0;
                            node = null;
                        }
                        else
                        {
                            // Interate children
                            nextLevel(node.children[node.iChild], total, timeStamp);
                            node.iChild++;
                        }
                    }
                }

            </div>
        }

        string getImageLink(File f, int envIndex)
        {
            if (f == null || envIndex == -1)
                return null;

            if (f.value != "")
            {
                string[] split = f.value.Split(new Char[] { '/' });
                if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
                {
                    split = f.value.Split(new Char[] { '.' });
                    switch (split.Last().ToLower())
                    {
                        case "jpg":
                        case "bmp":
                        case "png":
                            try
                            {
                                return Program.externalRest + "/server/getfile/" + envIndex + f.value;
                            }
                            catch { }
                            break;
                    }
                }
            }
            return null;
        }

        string getImage(File f, int envIndex)
        {
            if (f == null || envIndex == -1)
                return null;

            if (f.value != "")
            {
                string[] split = f.value.Split(new Char[] { '/' });
                if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
                {
                    split = f.value.Split(new Char[] { '.' });
                    switch (split.Last().ToLower())
                    {
                        case "jpg":
                        case "bmp":
                        case "png":
                            try
                            {
                                using (System.IO.Stream s = Program.env[envIndex].GetLocalStreamFromPackage(f.value))
                                {
                                    if (s != null)
                                    {
                                        using (var m = new System.IO.MemoryStream())
                                        {
                                            s.CopyTo(m);
                                            return System.Convert.ToBase64String(m.ToArray());
                                        }
                                    }
                                }
                            }
                            catch { }
                            break;
                    }
                }
            }
            return null;
        }
    }

    @code {
        protected override void OnInitialized()
        {
            SubmodelService.NewDataAvailable += NewData;
        }

        public void Dispose()
        {
            SubmodelService.NewDataAvailable -= NewData;
        }

        void NewData(object source, EventArgs args)
        {
            if (Program.isLoading)
                return;

            if (args is Program.NewDataAvailableArgs newArgs)
            {
                int newDataMode = newArgs.signalNewDataMode;
                if (newDataMode != 0)
                {
                    InvokeAsync(() => this.StateHasChanged());
                }
            }
        }
    }
